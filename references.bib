@inproceedings{DBLP:conf/icfp/VisserBT98,
  author ={Eelco Visser and Zine{-}El{-}Abidine Benaissa and Andrew
               P. Tolmach},
  editor ={Matthias Felleisen and Paul Hudak and Christian Queinnec},
  title ={Building Program Optimizers with Rewriting Strategies},
  booktitle ={Proceedings of the third {ACM} {SIGPLAN} International
               Conference on Functional Programming {(ICFP} '98),
               Baltimore, Maryland, USA, September 27-29, 1998},
  pages ={13--26},
  publisher ={{ACM}},
  year =1998,
  url ={https://doi.org/10.1145/289423.289425},
  doi ={10.1145/289423.289425},
  timestamp ={Tue, 06 Nov 2018 16:59:24 +0100},
  biburl ={https://dblp.org/rec/conf/icfp/VisserBT98.bib},
  bibsource ={dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/toplas/BrandHKO02,
  author ={Mark van den Brand and Jan Heering and Paul Klint and
               Pieter A. Olivier},
  title ={Compiling language definitions: the {ASF+SDF} compiler},
  journal ={{ACM} Trans. Program. Lang. Syst.},
  volume =24,
  number =4,
  pages ={334--368},
  year =2002,
  url ={https://doi.org/10.1145/567097.567099},
  doi ={10.1145/567097.567099},
  timestamp ={Fri, 27 Dec 2019 21:14:55 +0100},
  biburl ={https://dblp.org/rec/journals/toplas/BrandHKO02.bib},
  bibsource ={dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/scitools/BoyleHW96,
  author ={James M. Boyle and Terence J. Harmer and Victor L. Winter},
  editor ={Erlend Arge and Are Magnus Bruaset and Hans Petter
               Langtangen},
  title ={The {TAMPR} Program Transformation System: Simplifying the
               Development of Numerical Software},
  booktitle ={Modern Software Tools for Scientific Computing, SciTools
               1996, Oslo, Norway, September 16-18, 1996},
  pages ={353--372},
  publisher ={Birkh{\"{a}}user},
  year =1996,
  url ={https://doi.org/10.1007/978-1-4612-1986-6\_17},
  doi ={10.1007/978-1-4612-1986-6\_17},
  timestamp ={Fri, 24 Apr 2020 15:05:23 +0200},
  biburl ={https://dblp.org/rec/conf/scitools/BoyleHW96.bib},
  bibsource ={dblp computer science bibliography, https://dblp.org}
}

@article{denali,
  author ={Joshi, Rajeev and Nelson, Greg and Randall, Keith},
  title ={Denali: A Goal-directed Superoptimizer},
  journal ={SIGPLAN Not.},
  issue_date ={May 2002},
  volume =37,
  number =5,
  month =may,
  year =2002,
  issn ={0362-1340},
  pages ={304--314},
  numpages =11,
  url ={http://doi.acm.org/10.1145/543552.512566},
  doi ={10.1145/543552.512566},
  acmid =512566,
  publisher ={ACM},
  address ={New York, NY, USA},
  keywords ={optimizing compiler, superoptimizer},
}

@inproceedings{pp-congr,
  author ={Nieuwenhuis, Robert and Oliveras, Albert},
  title ={Proof-Producing Congruence Closure},
  year =2005,
  isbn =3540255966,
  publisher ={Springer-Verlag},
  address ={Berlin, Heidelberg},
  url ={https://doi.org/10.1007/978-3-540-32033-3_33},
  doi ={10.1007/978-3-540-32033-3_33},
  booktitle ={Proceedings of the 16th International Conference on Term
  Rewriting and Applications},
  pages ={453–468},
  numpages =16,
  location ={Nara, Japan},
  series ={RTA’05}
}

@inproceedings{eqsat,
  author ={Tate, Ross and Stepp, Michael and Tatlock, Zachary and
  Lerner, Sorin},
  title ={Equality Saturation: A New Approach to Optimization},
  booktitle ={Proceedings of the 36th Annual ACM SIGPLAN-SIGACT
  Symposium on Principles of Programming Languages},
  series ={POPL '09},
  year =2009,
  isbn ={978-1-60558-379-2},
  location ={Savannah, GA, USA},
  pages ={264--276},
  numpages =13,
  url ={http://doi.acm.org/10.1145/1480881.1480915},
  doi ={10.1145/1480881.1480915},
  acmid =1480915,
  publisher ={ACM},
  address ={New York, NY, USA},
  keywords ={compiler optimization, equality reasoning, intermediate
  representation},
}

@article{dpll,
  author ={Davis, Martin and Putnam, Hilary},
  title ={A Computing Procedure for Quantification Theory},
  year =1960,
  issue_date ={July 1960},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =7,
  number =3,
  issn ={0004-5411},
  url ={https://doi.org/10.1145/321033.321034},
  doi ={10.1145/321033.321034},
  journal ={J. ACM},
  month =jul,
  pages ={201–215},
  numpages =15
}

@incollection{nachum-rewrites,
  author ="Dershowitz, Nachum",
  editor ="Lauer, Peter E.",
  title ="A taste of rewrite systems",
  bookTitle ="Functional Programming, Concurrency, Simulation and
  Automated Reasoning: International Lecture Series 1991--1992
  McMaster University, Hamilton, Ontario, Canada",
  year =1993,
  publisher ="Springer Berlin Heidelberg",
  address ="Berlin, Heidelberg",
  pages ="199--228",
  abstract ="This survey of the theory and applications of rewriting
  with equations discusses the existence and uniqueness of normal
  forms, the KnuthBendix completion procedure and its variations, as
  well as rewriting-based (functional and logic) programming and
  (equational, first-order, and inductive) theorem proving. Ordinary,
  associative-commutative, and conditional rewriting are
  covered. Current areas of research are summarized and an extensive
  bibliography is provided.",
  isbn ="978-3-540-47776-1",
  doi ="10.1007/3-540-56883-2_11",
  url ="https://doi.org/10.1007/3-540-56883-2_11"
}

@article{simplify,
  author ={Detlefs, David and Nelson, Greg and Saxe, James B.},
  title ={Simplify: A Theorem Prover for Program Checking},
  journal ={J. ACM},
  issue_date ={May 2005},
  volume =52,
  number =3,
  month =may,
  year =2005,
  issn ={0004-5411},
  pages ={365--473},
  numpages =109,
  url ={http://doi.acm.org/10.1145/1066100.1066102},
  doi ={10.1145/1066100.1066102},
  acmid =1066102,
  publisher ={ACM},
  address ={New York, NY, USA},
  keywords ={Theorem proving, decision procedures, program checking},
}

@inproceedings{z3,
  author ={De Moura, Leonardo and Bj{\o}rner, Nikolaj},
  title ={Z3: An Efficient SMT Solver},
  booktitle ={Proceedings of the Theory and Practice of Software, 14th
  International Conference on Tools and Algorithms for the
  Construction and Analysis of Systems},
  series ={TACAS'08/ETAPS'08},
  year =2008,
  isbn ={3-540-78799-2, 978-3-540-78799-0},
  location ={Budapest, Hungary},
  pages ={337--340},
  numpages =4,
  url ={http://dl.acm.org/citation.cfm?id=1792734.1792766},
  acmid =1792766,
  publisher ={Springer-Verlag},
  address ={Berlin, Heidelberg},
}

@article{graphs,
  author ={Andries, Marc and Engels, Gregor and Habel, Annegret and
  Hoffmann, Berthold and Kreowski, Hans-J\"{o}rg and Kuske, Sabine and
  Plump, Detlef and Sch\"{u}rr, Andy and Taentzer, Gabriele},
  title ={Graph Transformation for Specification and Programming},
  year =1999,
  issue_date ={April 1999},
  publisher ={Elsevier North-Holland, Inc.},
  address ={USA},
  volume =34,
  number =1,
  issn ={0167-6423},
  url ={https://doi.org/10.1016/S0167-6423(98)00023-9},
  doi ={10.1016/S0167-6423(98)00023-9},
  journal ={Sci. Comput. Program.},
  month =apr,
  pages ={1–54},
  numpages =54,
  keywords ={transformation units, rule-based specification,
  structuring, graph transformation}
}

@article{herbie,
  author ={Panchekha, Pavel and Sanchez-Stern, Alex and Wilcox, James
  R. and Tatlock, Zachary},
  title ={Automatically Improving Accuracy for Floating Point
  Expressions},
  year =2015,
  issue_date ={August 2015},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =50,
  number =6,
  issn ={0362-1340},
  url ={https://doi.org/10.1145/2813885.2737959},
  doi ={10.1145/2813885.2737959},
  journal ={SIGPLAN Not.},
  month =jun,
  pages ={1–11},
  numpages =11,
  keywords ={Floating point, program rewriting, numerical accuracy}
}

@misc{rust,
  title ={Rust programming language},
  author ={Rust},
  howpublished ={\url{https://www.rust-lang.org/}},
  url ={https://www.rust-lang.org/},
  urldate ={2020-04-01},
}

@inproceedings{szalinski,
  title ={Synthesizing Structured {CAD} Models with Equality
  Saturation and Inverse Transformations},
  author ={ Chandrakana Nandi and Max Willsey and Adam Anderson and
    James R. Wilcox and Eva Darulova and Dan Grossman and Zachary
    Tatlock },
  year =2020,
  isbn =9781450376136,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3385412.3386012},
  doi ={10.1145/3385412.3386012},
  booktitle ={Proceedings of the 41st ACM SIGPLAN Conference on
  Programming Language Design and Implementation},
  pages ={31–44},
  numpages =14,
  keywords ={Program Synthesis, Equality Saturation, Computer-Aided
  Design, Decompilation},
  location ={London, UK},
  series ={PLDI 2020},
}

@article{reincarnate,
  author ={Nandi, Chandrakana and Wilcox, James R. and Panchekha,
  Pavel and Blau, Taylor and Grossman, Dan and Tatlock, Zachary},
  title ={Functional Programming for Compiling and Decompiling
  Computer-aided Design},
  journal ={Proc. ACM Program. Lang.},
  issue_date ={September 2018},
  volume =2,
  number ={ICFP},
  month =jul,
  year =2018,
  issn ={2475-1421},
  pages ={99:1--99:31},
  articleno =99,
  numpages =31,
  url ={http://doi.acm.org/10.1145/3236794},
  doi ={10.1145/3236794},
  acmid =3236794,
  publisher ={ACM},
  address ={New York, NY, USA},
  keywords ={3D printing, denotational semantics, language design,
  program synthesis},
}

@inproceedings{inverse,
  author ={Du, Tao and Priya Inala, Jeevana and Pu, Yewen and
  Spielberg, Andrew and Schulz, Adriana and Rus, Daniela and
  Solar-Lezama, Armando and Matusik, Wojciech},
  year =2018,
  month =12,
  pages ={1-16},
  title ={InverseCSG: automatic conversion of 3D models to CSG trees},
  doi ={10.1145/3272127.3275006},
  booktitle ={ACM Transactions on Graphics},
}

@inproceedings{shape,
  title ={Learning to Infer and Execute 3D Shape Programs},
  author ={Yonglong Tian and Andrew Luo and Xingyuan Sun and Kevin
  Ellis and William T. Freeman and Joshua B. Tenenbaum and Jiajun Wu},
  booktitle ={International Conference on Learning Representations},
  year =2019,
  url ={https://openreview.net/forum?id=rylNH20qFQ},
}

@inproceedings{latex,
  title ={Learning to Infer Graphics Programs from Hand-Drawn Images},
  author ={Kevin Ellis and Daniel Ritchie and Armando Solar-Lezama and
  Joshua B. Tenenbaum},
  booktitle ={Neural Information Processing Systems (NIPS)},
  year =2018,
}

@article{csgnet,
  author ={Gopal Sharma and Rishabh Goyal and Difan Liu and Evangelos
               Kalogerakis and Subhransu Maji},
  title ={CSGNet: Neural Shape Parser for Constructive Solid Geometry},
  journal ={CoRR},
  volume ={abs/1712.08290},
  year =2017,
  url ={http://arxiv.org/abs/1712.08290},
  archivePrefix ={arXiv},
  eprint ={1712.08290},
  timestamp ={Mon, 13 Aug 2018 16:47:26 +0200},
  biburl ={https://dblp.org/rec/bib/journals/corr/abs-1712-08290},
  bibsource ={dblp computer science bibliography, https://dblp.org}
}

@InProceedings{ematching,
  author ="de Moura, Leonardo and Bj{\o}rner, Nikolaj",
  editor ="Pfenning, Frank",
  title ="Efficient E-Matching for SMT Solvers",
  booktitle ="Automated Deduction -- CADE-21",
  year =2007,
  publisher ="Springer Berlin Heidelberg",
  address ="Berlin, Heidelberg",
  pages ="183--198",
  abstract ="Satisfiability Modulo Theories (SMT) solvers have proven
  highly scalable, efficient and suitable for integrating theory
  reasoning. However, for numerous applications from program analysis
  and verification, the ground fragment is insufficient, as proof
  obligations often include quantifiers. A well known approach for
  quantifier reasoning uses a matching algorithm that works against an
  E-graph to instantiate quantified variables. This paper introduces
  algorithms that identify matches on E-graphs incrementally and
  efficiently. In particular, we introduce an index that works on
  E-graphs, called E-matching code trees that combine features of
  substitution and code trees, used in saturation based theorem
  provers. E-matching code trees allow performing matching against
  several patterns simultaneously. The code trees are combined with an
  additional index, called the inverted path index, which filters
  E-graph terms that may potentially match patterns when the E-graph
  is updated. Experimental results show substantial performance
  improvements over existing state-of-the-art SMT solvers.",
  isbn ="978-3-540-73595-3"
}

@article{10.1145/36177.36194,
  author ={Massalin, Henry},
  title ={Superoptimizer: A Look at the Smallest Program},
  year =1987,
  issue_date ={November 1987},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =15,
  number =5,
  issn ={0163-5964},
  url ={https://doi.org/10.1145/36177.36194},
  doi ={10.1145/36177.36194},
  journal ={SIGARCH Comput. Archit. News},
  month =oct,
  pages ={122–126},
  numpages =5
}

@inproceedings{massalin,
  author ={Massalin, Henry},
  title ={Superoptimizer: A Look at the Smallest Program},
  year =1987,
  isbn =0818608056,
  publisher ={IEEE Computer Society Press},
  address ={Washington, DC, USA},
  url ={https://doi.org/10.1145/36206.36194},
  doi ={10.1145/36206.36194},
  booktitle ={Proceedings of the Second International Conference on
  Architectual Support for Programming Languages and Operating
  Systems},
  pages ={122–126},
  numpages =5,
  location ={Palo Alto, California, USA},
  series ={ASPLOS II}
}

@article{unionfind1964,
  author ={Galler, Bernard A. and Fisher, Michael J.},
  title ={An Improved Equivalence Algorithm},
  year =1964,
  issue_date ={May 1964},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =7,
  number =5,
  issn ={0001-0782},
  url ={https://doi.org/10.1145/364099.364331},
  doi ={10.1145/364099.364331},
  journal ={Commun. ACM},
  month =may,
  pages ={301–303},
  numpages =3
}

@article{unionfind,
  author ={Tarjan, Robert Endre},
  title ={Efficiency of a Good But Not Linear Set Union Algorithm},
  year =1975,
  issue_date ={April 1975},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =22,
  number =2,
  issn ={0004-5411},
  url
  ={https://doi-org.offcampus.lib.washington.edu/10.1145/321879.321884},
  doi ={10.1145/321879.321884},
  journal ={J. ACM},
  month =apr,
  pages ={215–225},
  numpages =11
}

@Article{Boehm_2019,
  author ={Boehm, Matthias},
  title ={Apache {SystemML}},
  year =2019,
  pages ={81–86},
  doi ={10.1007/978-3-319-77525-8_187},
  url ={http://dx.doi.org/10.1007/978-3-319-77525-8_187},
  isbn =9783319775258,
  journal ={Encyclopedia of Big Data Technologies},
  publisher ={Springer International Publishing}
}

@article{spores,
  title ={{SPORES}: Sum-Product Optimization via Relational Equality
  Saturation for Large Scale Linear Algebra},
  author ={Wang, Yisu Remy and Hutchison, Shana and Leang, Jonathan
  and Howe, Bill and Suciu, Dan},
  journal ={Proceedings of the VLDB Endowment},
  year =2020,
  publisher ={VLDB Endowment}
}

@article {wu_siga19,
  author ={Chenming Wu and Haisen Zhao and Chandrakana Nandi and
  Jeffrey I. Lipton and Zachary Tatlock and Adriana Schulz},
  title ={Carpentry Compiler},
  journal ={ACM Transactions on Graphics},
  note ={presented at SIGGRAPH Asia 2019},
  volume =38,
  number =6,
  pages ={Article No. 195},
  year =2019
}

@InProceedings{sygus-rws-enum,
  author ="N{\"o}tzli, Andres and Reynolds, Andrew and Barbosa, Haniel
    and Niemetz, Aina and Preiner, Mathias and Barrett, Clark and
    Tinelli, Cesare",
  editor ="Janota, Mikol{\'a}{\v{s}} and Lynce, In{\^e}s",
  title ="Syntax-Guided Rewrite Rule Enumeration for SMT Solvers",
  booktitle ="Theory and Applications of Satisfiability Testing -- SAT
  2019",
  year =2019,
  publisher ="Springer International Publishing",
  address ="Cham",
  pages ="279--297",
  abstract ="The performance of modern Satisfiability Modulo Theories
  (SMT) solvers relies crucially on efficient decision procedures as
  well as static simplification techniques, which include large sets
  of rewrite rules. Manually discovering and implementing rewrite
  rules is challenging. In this work, we propose a framework that uses
  enumerative syntax-guided synthesis (SyGuS) to propose rewrite rules
  that are not implemented in a given SMT solver. We implement this
  framework in cvc4, a state-of-the-art SMT and SyGuS solver, and
  evaluate several use cases. We show that some SMT solvers miss
  rewriting opportunities, or worse, have bugs in their rewriters. We
  also show that a variation of our approach can be used to test the
  correctness of a rewriter. Finally, we show that rewrites discovered
  with this technique lead to significant improvements in cvc4 on both
  SMT and SyGuS problems over bit-vectors and strings.",
  isbn ="978-3-030-24258-9"
}

@inproceedings{yogo-pldi20,
  author ={Premtoon, Varot and Koppel, James and Solar-Lezama,
  Armando},
  title ={Semantic Code Search via Equational Reasoning},
  year =2020,
  isbn =9781450376136,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3385412.3386001},
  doi ={10.1145/3385412.3386001},
  booktitle ={Proceedings of the 41st ACM SIGPLAN Conference on
  Programming Language Design and Implementation},
  pages ={1066–1082},
  numpages =17,
  keywords ={equational reasoning, code search},
  location ={London, UK},
  series ={PLDI 2020}
}

@article{downey-cse,
  author ={Downey, Peter J. and Sethi, Ravi and Tarjan, Robert Endre},
  title ={Variations on the Common Subexpression Problem},
  year =1980,
  issue_date ={Oct. 1980},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =27,
  number =4,
  issn ={0004-5411},
  url ={https://doi.org/10.1145/322217.322228},
  doi ={10.1145/322217.322228},
  journal ={J. ACM},
  month =oct,
  pages ={758–771},
  numpages =14
}

@inproceedings{kozen-stoc77,
  author ={Kozen, Dexter},
  title ={Complexity of Finitely Presented Algebras},
  year =1977,
  isbn =9781450374095,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/800105.803406},
  doi ={10.1145/800105.803406},
  abstract ={An algebra A is finitely presented if there is a finite
  set G of generator symbols, a finite set O of operator symbols, and
  a finite set Γ of defining relations xΞy where x and y are
  well-formed terms over G and O, such that A is isomorphic to the
  free algebra on G and O modulo the congruence induced by Γ.The
  uniform word problem, the finiteness problem, the triviality problem
  (whether A is the one element algebra), and the subalgebra
  membership problem (whether a given element of A is contained in a
  finitely generated subalgebra of A) for finitely presented algebras
  are shown to be ≤mlog-complete for P. The schema satisfiability
  problem and schema validity problem are shown to be ≤mlog-complete
  for NP and co-NP, respectively. Finally, the problem of isomorphism
  of finitely presented algebras is shown to be polynomial time
  many-one equivalent to the problem of graph isomorphism.},
  booktitle ={Proceedings of the Ninth Annual ACM Symposium on Theory
  of Computing},
  pages ={164–177},
  numpages =14,
  location ={Boulder, Colorado, USA},
  series ={STOC '77}
}

@article{nelson-oppen-78,
  author ={Nelson, Greg and Oppen, Derek C.},
  title ={Fast Decision Procedures Based on Congruence Closure},
  year =1980,
  issue_date ={April 1980},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =27,
  number =2,
  issn ={0004-5411},
  url ={https://doi.org/10.1145/322186.322198},
  doi ={10.1145/322186.322198},
  abstract ={The notion of the congruence closure of a relation on a
  graph is defined and several algorithms for computing it are
  surveyed. A simple proof is given that the congruence closure
  algorithm provides a decision procedure for the quantifier-free
  theory of equality. A decision procedure is then given for the
  quantifier-free theory of LISP list structure based on the
  congruence closure algorithm. Both decision procedures determine the
  satisfiability of a conjunction of literals of length n in average
  time O(n log n) using the fastest known congruence closure
  algorithm. It is also shown that if the axiomatization of the theory
  of list structure is changed slightly, the problem of determining
  the satisfiability of a conjunction of literals becomes
  NP-complete. The decision procedures have been implemented in the
  authors' simplifier for the Stanford Pascal Verifier.},
  journal ={J. ACM},
  month =apr,
  pages ={356–364},
  numpages =9
}

@book{adams1995hitchhiker,
  title ={The Hitchhiker's Guide to the Galaxy},
  author ={Adams, D.},
  isbn =9781417642595,
  url ={http://books.google.com/books?id=W-xMPgAACAAJ},
  year =1995,
  publisher ={San Val}
}

@inproceedings{taso,
  author ={Jia, Zhihao and Padon, Oded and Thomas, James and
  Warszawski, Todd and Zaharia, Matei and Aiken, Alex},
  title ={{TASO: Optimizing Deep Learning Computation with Automatic
  Generation of Graph Substitutions}},
  year =2019,
  isbn =9781450368735,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3341301.3359630},
  doi ={10.1145/3341301.3359630},
  booktitle ={Proceedings of the 27th ACM Symposium on Operating
  Systems Principles},
  pages ={47–62},
  numpages =16,
  keywords ={formal verification, deep neural network, computation
  graph substitutions, superoptimization},
  location ={Huntsville, Ontario, Canada},
  series ={SOSP '19}
}

@inproceedings{metaflow,
  author ={Jia, Zhihao and Thomas, James and Warszawski, Todd and Gao,
  Mingyu and Zaharia, Matei and Aiken, Alex},
  title ={{Optimizing DNN Computation with Relaxed Graph
  Substitutions}},
  year =2019,
  booktitle ={Proceedings of the 2nd SysML Conference},
  series ={SysML '19}
}

@article{Fang:sampling,
  author ={Fang, Jingzhi and Shen, Yanyan and Wang, Yue and Chen, Lei},
  title ={{Optimizing DNN Computation Graph Using Graph
  Substitutions}},
  year =2020,
  issue_date ={August 2020},
  publisher ={VLDB Endowment},
  volume =13,
  number =12,
  issn ={2150-8097},
  url ={https://doi.org/10.14778/3407790.3407857},
  doi ={10.14778/3407790.3407857},
  journal ={Proc. VLDB Endow.},
  month =jul,
  pages ={2734–2746},
  numpages =13
}

@inproceedings{NeuRewriter,
  author ={Xinyun Chen and Yuandong Tian},
  editor ={Hanna M. Wallach and Hugo Larochelle and Alina Beygelzimer
               and Florence d'Alch{\'e}{-}Buc and Emily B. Fox and
               Roman Garnett},
  title ={Learning to Perform Local Rewriting for Combinatorial
  Optimization},
  booktitle ={Advances in Neural Information Processing Systems 32
  Annual Conference},
  pages ={6278--6289},
  year =2019,
  url
  ={http://papers.nips.cc/paper/8858-learning-to-perform-local-rewriting-for-combinatorial-optimization},
  timestamp ={Fri, 06 Mar 2020 16:59:09 +0100},
  biburl ={https://dblp.org/rec/conf/nips/ChenT19.bib},
  bibsource ={dblp computer science bibliography, https://dblp.org},
  series ={NeurIPS '19}
}

@misc{egg,
  title ={egg: Fast and Extensible E-graphs},
  author ={Max Willsey and Yisu Remy Wang and Oliver Flatt and
  Chandrakana Nandi and Pavel Panchekha and Zachary Tatlock},
  year =2020,
  eprint ={2004.03082},
  archivePrefix ={arXiv},
  primaryClass ={cs.PL}
}

@techreport{scip,
  author ={Gerald Gamrath and Daniel Anderson and Ksenia Bestuzheva
  and Wei-Kun Chen and Leon Eifler and Maxime Gasse and Patrick
  Gemander and Ambros Gleixner and Leona Gottwald and Katrin Halbig
  and Gregor Hendel and Christopher Hojny and Thorsten Koch and Le
  Bodic, Pierre and Stephen J. Maher and Frederic Matter and Matthias
  Miltenberger and Erik M{\"u}hmer and Benjamin M{\"u}ller and Marc
  E. Pfetsch and Franziska Schl{\"o}sser and Felipe Serrano and Yuji
  Shinano and Christine Tawfik and Stefan Vigerske and Fabian
  Wegscheider and Dieter Weninger and Jakob Witzig},
  title ={{The SCIP Optimization Suite 7.0}},
  type ={Technical Report},
  institution ={Optimization Online},
  month ={March},
  year =2020,
  url ={http://www.optimization-online.org/DB_HTML/2020/03/7705.html}
}

@misc{ortools,
  title ={OR-Tools},
  version ={7.2},
  author ={Laurent Perron and Vincent Furnon},
  organization ={Google},
  url ={https://developers.google.com/optimization/},
  date ={2019-7-19}
}

@inproceedings {TensorFlow,
  author ={Mart{\'\i}n Abadi and Paul Barham and Jianmin Chen and
  Zhifeng Chen and Andy Davis and Jeffrey Dean and Matthieu Devin and
  Sanjay Ghemawat and Geoffrey Irving and Michael Isard and Manjunath
  Kudlur and Josh Levenberg and Rajat Monga and Sherry Moore and Derek
  G. Murray and Benoit Steiner and Paul Tucker and Vijay Vasudevan and
  Pete Warden and Martin Wicke and Yuan Yu and Xiaoqiang Zheng},
  title ={{TensorFlow: A System for Large-Scale Machine Learning}},
  booktitle ={12th {USENIX} Symposium on Operating Systems Design and
  Implementation ({OSDI} 16)},
  year =2016,
}

@misc{TensorRT,
  title ={{TensorRT}},
  author ={NVIDIA},
  url ={https://developer.nvidia.com/tensorrt},
  date ={2019-9-29}
}

@inproceedings{bert,
  title ={BERT: Pre-training of Deep Bidirectional Transformers for
  Language Understanding},
  author ={J. Devlin and Ming-Wei Chang and Kenton Lee and Kristina
  Toutanova},
  booktitle ={NAACL-HLT},
  year =2019
}

@article{nasrnn,
  title ={Neural Architecture Search with Reinforcement Learning},
  author ={Barret Zoph and Quoc V. Le},
  year =2017,
  URL ={https://arxiv.org/abs/1611.01578},
  journal ={arXiv},
}

@INPROCEEDINGS{nasneta,
  author ={B. {Zoph} and V. {Vasudevan} and J. {Shlens} and
  Q. V. {Le}},
  booktitle ={2018 IEEE/CVF Conference on Computer Vision and Pattern
  Recognition},
  title ={Learning Transferable Architectures for Scalable Image
  Recognition},
  year =2018,
  pages ={8697-8710},
}

@INPROCEEDINGS{resnext50,
  author ={S. {Xie} and R. {Girshick} and P. {Dollár} and Z. {Tu} and
  K. {He}},
  booktitle ={2017 IEEE Conference on Computer Vision and Pattern
  Recognition (CVPR)},
  title ={Aggregated Residual Transformations for Deep Neural
  Networks},
  year =2017,
  pages ={5987-5995},
}

@article{inceptionv3,
  title ={Rethinking the Inception Architecture for Computer Vision},
  author ={Christian Szegedy and V. Vanhoucke and S. Ioffe and Jon
  Shlens and Z. Wojna},
  journal ={2016 IEEE Conference on Computer Vision and Pattern
  Recognition (CVPR)},
  year =2016,
  pages ={2818-2826}
}

@INPROCEEDINGS{resnet,
  author ={K. {He} and X. {Zhang} and S. {Ren} and J. {Sun}},
  booktitle ={2016 IEEE Conference on Computer Vision and Pattern
  Recognition (CVPR)},
  title ={Deep Residual Learning for Image Recognition},
  year =2016,
  pages ={770-778},
}

@incollection{rewritesystems,
  author ={Nachum Dershowitz and Jean{-}Pierre Jouannaud},
  editor ={Jan van Leeuwen},
  title ={Rewrite Systems},
  booktitle ={Handbook of Theoretical Computer Science, Volume {B:}
               Formal Models and Semantics},
  pages ={243--320},
  publisher ={Elsevier and {MIT} Press},
  year =1990,
  url ={https://doi.org/10.1016/b978-0-444-88074-1.50011-1},
  doi ={10.1016/b978-0-444-88074-1.50011-1},
  timestamp ={Tue, 06 Aug 2019 09:45:21 +0200},
  biburl ={https://dblp.org/rec/books/el/leeuwen90/DershowitzJ90.bib},
  bibsource ={dblp computer science bibliography, https://dblp.org}
}

@phdthesis{nelson,
  author ={Nelson, Charles Gregory},
  title ={Techniques for Program Verification},
  year =1980,
  note ={AAI8011683},
  school ={Stanford University},
  address ={Stanford, CA, USA},
}

@InProceedings{eqsat-llvm,
  author ="Stepp, Michael and Tate, Ross and Lerner, Sorin",
  editor ="Gopalakrishnan, Ganesh and Qadeer, Shaz",
  title ="Equality-Based Translation Validator for LLVM",
  booktitle ="Computer Aided Verification",
  year =2011,
  publisher ="Springer Berlin Heidelberg",
  address ="Berlin, Heidelberg",
  pages ="737--742",
  abstract ="We updated our Peggy tool, previously presented in [6],
  to perform translation validation for the LLVM compiler using a
  technique called Equality Saturation. We present the tool, and
  illustrate its effectiveness at doing translation validation on SPEC
  2006 benchmarks.",
  isbn ="978-3-642-22110-1"
}


%%%%%%%%%%%%%%%%%%%%% superoptimizers %%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{Bansal:superopt-binary,
  author ={Bansal, Sorav and Aiken, Alex},
  title ={Binary translation using peephole superoptimizers},
  booktitle ={OSDI},
  year =2008,
}

@inproceedings{GNU-superopt,
  author ={Granlund, Torbj\"{o}rn and Kenner, Richard},
  title ={Eliminating Branches Using a Superoptimizer and the GNU C
  Compiler},
  booktitle ={PLDI},
  year =1992,
  location ={San Francisco, California, USA},
}

@inproceedings{stoke:asplos,
  author ={Schkufza, Eric and Sharma, Rahul and Aiken, Alex},
  title ={Stochastic superoptimization},
  booktitle ={ASPLOS},
  year =2013,
}

@inproceedings{stoke:pldi,
  author ={Schkufza, Eric and Sharma, Rahul and Aiken, Alex},
  title ={Stochastic Optimization of Floating-point Programs with
  Tunable Precision},
  booktitle ={PLDI},
  year =2014
}

@article{Souper,
  author ={Raimondas Sasnauskas and Yang Chen and Peter Collingbourne
               and Jeroen Ketema and Jubi Taneja and John Regehr},
  title ={Souper: {A} Synthesizing Superoptimizer},
  journal ={CoRR},
  volume ={abs/1711.04422},
  year =2017,
  url ={http://arxiv.org/abs/1711.04422},
  archivePrefix ={arXiv},
  eprint ={1711.04422},
  timestamp ={Mon, 13 Aug 2018 16:48:06 +0200},
  biburl ={https://dblp.org/rec/journals/corr/abs-1711-04422.bib},
  bibsource ={dblp computer science bibliography, https://dblp.org}
}

@inproceedings{greenthumb-asplos,
  author ={Phothilimthana, Phitchaya Mangpo and Thakur, Aditya and
  Bodik, Rastislav and Dhurjati, Dinakar},
  title ={Scaling up Superoptimization},
  year =2016,
  isbn =9781450340915,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/2872362.2872387},
  doi ={10.1145/2872362.2872387},
  booktitle ={Proceedings of the Twenty-First International Conference
  on Architectural Support for Programming Languages and Operating
  Systems},
  pages ={297–310},
  numpages =14,
  keywords ={SMT, program synthesis, superoptimization},
  location ={Atlanta, Georgia, USA},
  series ={ASPLOS '16}
}

@inproceedings{greenthumb-cc,
  author ={Phothilimthana, Phitchaya Mangpo and Thakur, Aditya and
  Bodik, Rastislav and Dhurjati, Dinakar},
  title ={GreenThumb: Superoptimizer Construction Framework},
  year =2016,
  isbn =9781450342414,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/2892208.2892233},
  doi ={10.1145/2892208.2892233},
  abstract ={ Developing an optimizing compiler backend remains a
  laborious process, especially for nontraditional ISAs that have been
  appearing recently. Superoptimization sidesteps the need for many
  code transformations by searching for the most optimal instruction
  sequence semantically equivalent to the original code fragment. Even
  though superoptimization discovers the best machine-specific code
  optimizations, it has yet to become widely-used. We propose
  GreenThumb, an extensible framework that reduces the cost of
  constructing superoptimizers and provides a fast search algorithm
  that can be reused for any ISA, exploiting the unique strengths of
  enumerative, stochastic, and symbolic (SAT-solver-based) search
  algorithms. To extend GreenThumb to a new ISA, it is only necessary
  to implement an emulator for the ISA and provide some ISA-specific
  search utility functions. },
  booktitle ={Proceedings of the 25th International Conference on
  Compiler Construction},
  pages ={261–262},
  numpages =2,
  keywords ={Program Synthesis, Superoptimization, SMT},
  location ={Barcelona, Spain},
  series ={CC 2016}
}

@inproceedings{yogo,
  author ={Premtoon, Varot and Koppel, James and Solar-Lezama,
  Armando},
  title ={Semantic Code Search via Equational Reasoning},
  year =2020,
  isbn =9781450376136,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3385412.3386001},
  doi ={10.1145/3385412.3386001},
  booktitle ={Proceedings of the 41st ACM SIGPLAN Conference on
  Programming Language Design and Implementation},
  pages ={1066–1082},
  numpages =17,
  keywords ={equational reasoning, code search},
  location ={London, UK},
  series ={PLDI 2020}
}

@INPROCEEDINGS{vgg,
  author ={S. {Liu} and W. {Deng}},
  booktitle ={2015 3rd IAPR Asian Conference on Pattern Recognition
  (ACPR)},
  title ={Very deep convolutional neural network based image
  classification using small training sample size},
  year =2015,
  pages ={730-734},
}

@article{squeezenet,
  title ={SqueezeNet: AlexNet-level accuracy with 50x fewer parameters
  and <1MB model size},
  author ={Forrest N. Iandola and Matthew W. Moskewicz and K. Ashraf
  and Song Han and W. Dally and K. Keutzer},
  journal ={ArXiv},
  year =2017,
  volume ={abs/1602.07360}
}

@incollection{NEURIPS2019_9015,
  title ={{PyTorch}: An Imperative Style, High-Performance Deep
  Learning Library},
  author ={Paszke, Adam and Gross, Sam and Massa, Francisco and Lerer,
  Adam and Bradbury, James and Chanan, Gregory and Killeen, Trevor and
  Lin, Zeming and Gimelshein, Natalia and Antiga, Luca and Desmaison,
  Alban and Kopf, Andreas and Yang, Edward and DeVito, Zachary and
  Raison, Martin and Tejani, Alykhan and Chilamkurthy, Sasank and
  Steiner, Benoit and Fang, Lu and Bai, Junjie and Chintala, Soumith},
  booktitle ={Advances in Neural Information Processing Systems 32},
  editor ={H. Wallach and H. Larochelle and A. Beygelzimer and
  F. d\textquotesingle Alch\'{e}-Buc and E. Fox and R. Garnett},
  pages ={8024--8035},
  year =2019,
  publisher ={Curran Associates, Inc.},
  url
  ={http://papers.neurips.cc/paper/9015-pytorch-an-imperative-style-high-performance-deep-learning-library.pdf}
}

@misc{mlir,
  title ={{MLIR}: A Compiler Infrastructure for the End of Moore's
  Law},
  author ={Chris Lattner and Mehdi Amini and Uday Bondhugula and
  Albert Cohen and Andy Davis and Jacques Pienaar and River Riddle and
  Tatiana Shpeisman and Nicolas Vasilache and Oleksandr Zinenko},
  year =2020,
  eprint ={2002.11054},
  archivePrefix ={arXiv},
  primaryClass ={cs.PL}
}

@misc{xla,
  title ={{XLA} - {TensorFlow}, compiled},
  url
  ={https://developers.googleblog.com/2017/03/xla-tensorflow-compiled.html},
  author ={Google},
  journal ={Google Developers Blog},
  year =2017,
  month ={Mar}
}

@inproceedings{tensat,
  title ={Equality Saturation for Tensor Graph Superoptimization},
  author ={Yichen Yang and Phitchaya Mangpo Phothilimtha and Yisu Remy
  Wang and Max Willsey and Sudip Roy and Jacques Pienaar},
  eprint ={2101.01332},
  booktitle ={Proceedings of Machine Learning and Systems},
  year =2021
}

@misc{ruler,
  title ={Rewrite Rule Inference Using Equality Saturation},
  author ={ Chandrakana Nandi and Max Willsey and Amy Zhu and Brett
    Saiki and Yisu Wang and Adam Anderson and Adriana Schulz and Dan
    Grossman and Zachary Tatlock},
  year =2021,
  note ={Under submission},
}

@InProceedings{nada14,
  author ="Amin, Nada and Leino, K. Rustan M.  and Rompf, Tiark",
  editor ="Seidl, Martina and Tillmann, Nikolai",
  title ="Computing with an SMT Solver",
  booktitle ="Tests and Proofs",
  year =2014,
  publisher ="Springer International Publishing",
  address ="Cham",
  pages ="20--35",
  abstract ="Satisfiability modulo theories (SMT) solvers that support
  quantifier instantiations via matching triggers can be programmed to
  give practical support for user-defined theories. Care must be taken
  to avoid so-called matching loops, which may prevent termination of
  the solver. By design, such avoidance limits the extent to which the
  SMT solver is able to apply the definitions of user-defined
  functions. For some inputs to these functions, however, it is
  instead desireable to allow unadulterated use of the functions; in
  particular, if it is known that evaluation will terminate.",
  isbn ="978-3-319-09099-3"
}

@inproceedings{buchwald-cgo18,
  author ={Buchwald, Sebastian and Fried, Andreas and Hack, Sebastian},
  title ={Synthesizing an Instruction Selection Rule Library from
  Semantic Specifications},
  year =2018,
  isbn =9781450356176,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3168821},
  doi ={10.1145/3168821},
  booktitle ={Proceedings of the 2018 International Symposium on Code
  Generation and Optimization},
  pages ={300–313},
  numpages =14,
  keywords ={Instruction Selection, Program Synthesis},
  location ={Vienna, Austria},
  series ={CGO 2018}
}

@inproceedings{taso19,
  author ={Jia, Zhihao and Padon, Oded and Thomas, James and
  Warszawski, Todd and Zaharia, Matei and Aiken, Alex},
  title ={TASO: Optimizing Deep Learning Computation with Automatic
  Generation of Graph Substitutions},
  year =2019,
  isbn =9781450368735,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3341301.3359630},
  doi ={10.1145/3341301.3359630},
  booktitle ={Proceedings of the 27th ACM Symposium on Operating
  Systems Principles},
  pages ={47–62},
  numpages =16,
  keywords ={superoptimization, computation graph substitutions,
  formal verification, deep neural network},
  location ={Huntsville, Ontario, Canada},
  series ={SOSP ’19}
}

@InProceedings{sat19,
  author ="N{\"o}tzli, Andres and Reynolds, Andrew and Barbosa, Haniel
and Niemetz, Aina and Preiner, Mathias and Barrett, Clark and Tinelli,
Cesare",
  editor ="Janota, Mikol{\'a}{\v{s}} and Lynce, In{\^e}s",
  title ="Syntax-Guided Rewrite Rule Enumeration for SMT Solvers",
  booktitle ="Theory and Applications of Satisfiability Testing -- SAT
  2019",
  year =2019,
  publisher ="Springer International Publishing",
  address ="Cham",
  pages ="279--297",
  abstract ="The performance of modern Satisfiability Modulo Theories
  (SMT) solvers relies crucially on efficient decision procedures as
  well as static simplification techniques, which include large sets
  of rewrite rules. Manually discovering and implementing rewrite
  rules is challenging. In this work, we propose a framework that uses
  enumerative syntax-guided synthesis (SyGuS) to propose rewrite rules
  that are not implemented in a given SMT solver. We implement this
  framework in cvc4, a state-of-the-art SMT and SyGuS solver, and
  evaluate several use cases. We show that some SMT solvers miss
  rewriting opportunities, or worse, have bugs in their rewriters. We
  also show that a variation of our approach can be used to test the
  correctness of a rewriter. Finally, we show that rewrites discovered
  with this technique lead to significant improvements in cvc4 on both
  SMT and SyGuS problems over bit-vectors and strings.",
  isbn ="978-3-030-24258-9"
}


@inproceedings{swapper,
  author ={Singh, Rohit and Solar-Lezama, Armando},
  title ={Swapper: A Framework for Automatic Generation of Formula
  Simplifiers Based on Conditional Rewrite Rules},
  year =2016,
  isbn =9780983567868,
  publisher ={FMCAD Inc},
  address ={Austin, Texas},
  abstract ={This paper addresses the problem of creating simplifiers
  for logic formulas based on conditional term rewriting. In
  particular, the paper focuses on a program synthesis application
  where formula simplifications have been shown to have a significant
  impact. We show that by combining machine learning techniques with
  constraint-based synthesis, it is possible to synthesize a formula
  simplifier fully automatically from a corpus of representative
  problems, making it possible to create formula simplifiers tailored
  to specific problem domains. We demonstrate the benefits of our
  approach for synthesis benchmarks from the SyGuS competition and
  automated grading.},
  booktitle ={Proceedings of the 16th Conference on Formal Methods in
  Computer-Aided Design},
  pages ={185–192},
  numpages =8,
  location ={Mountain View, California},
  series ={FMCAD '16}
}

@phdthesis{sketch,
  author ={Solar-Lezama, Armando},
  advisor ={Bodik, Rastislav},
  title ={Program Synthesis by Sketching},
  year =2008,
  isbn ={978-1-109-09745-0},
  note ={AAI3353225},
  publisher ={University of California at Berkeley},
  address ={Berkeley, CA, USA},
}

@InProceedings{romano,
  author ="Romano, Anthony and Engler, Dawson",
  editor ="Bartocci, Ezio and Ramakrishnan, C. R.",
  title ="Expression Reduction from Programs in a Symbolic Binary
  Executor",
  booktitle ="Model Checking Software",
  year =2013,
  publisher ="Springer Berlin Heidelberg",
  address ="Berlin, Heidelberg",
  pages ="301--319",
  abstract ="Symbolic binary execution is a dynamic analysis method
  which explores program paths to generate test cases for compiled
  code. Throughout execution, a program is evaluated with a bit-vector
  theorem prover and a runtime interpreter as a mix of symbolic
  expressions and concrete values. Left untended, these symbolic
  expressions grow to negatively impact interpretation performance.",
  isbn ="978-3-642-39176-7"
}

@article{hop,
  author ={Davidson, Jack W. and Fraser, Christopher W.},
  title ={Automatic Generation of Peephole Optimizations},
  year =2004,
  issue_date ={April 2004},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =39,
  number =4,
  issn ={0362-1340},
  url ={https://doi.org/10.1145/989393.989407},
  doi ={10.1145/989393.989407},
  abstract ={This paper describes a system that automatically
  generates peephole optimizations. A general peephole optimizer
  driven by a machine description produces optimizations at
  compile-compile time for a fast, pattern-directed, compile-time
  optimizer. They form part of a compiler that simplifies retargeting
  by substituting peephole optimization for case analysis.},
  journal ={SIGPLAN Not.},
  month =apr,
  pages ={104–111},
  numpages =8
}

@InProceedings{niemetz,
  author ="Niemetz, Aina and Preiner, Mathias and Reynolds, Andrew and
Barrett, Clark and Tinelli, Cesare",
  editor ="Chockler, Hana and Weissenbacher, Georg",
  title ="Solving Quantified Bit-Vectors Using Invertibility
  Conditions",
  booktitle ="Computer Aided Verification",
  year =2018,
  publisher ="Springer International Publishing",
  address ="Cham",
  pages ="236--255",
  abstract ="We present a novel approach for solving quantified
  bit-vector formulas in Satisfiability Modulo Theories (SMT) based on
  computing symbolic inverses of bit-vector operators. We derive
  conditions that precisely characterize when bit-vector constraints
  are invertible for a representative set of bit-vector operators
  commonly supported by SMT solvers. We utilize syntax-guided
  synthesis techniques to aid in establishing these conditions and
  verify them independently by using several SMT solvers. We show that
  invertibility conditions can be embedded into quantifier
  instantiations using Hilbert choice expressions, and give
  experimental evidence that a counterexample-guided approach for
  quantifier instantiation utilizing these techniques leads to
  performance improvements with respect to state-of-the-art solvers
  for quantified bit-vector constraints.",
  isbn ="978-3-319-96142-2"
}

@inproceedings{nadel,
  author ={Nadel, Alexander},
  title ={Bit-Vector Rewriting with Automatic Rule Generation},
  year =2014,
  isbn =9783319088662,
  publisher ={Springer-Verlag},
  address ={Berlin, Heidelberg},
  url ={https://doi.org/10.1007/978-3-319-08867-9_44},
  doi ={10.1007/978-3-319-08867-9_44},
  abstract ={Rewriting is essential for efficient bit-vector SMT
  solving. The rewriting algorithm commonly used by modern SMT solvers
  iteratively applies a set of ad hoc rewriting rules hard-coded into
  the solver to simplify the given formula at the preprocessing
  stage. This paper proposes an automatic approach to rewriting. The
  solver starts each invocation with an empty set of rewriting
  rules. The set is extended by applying at run-time an automatic
  SAT-based algorithm for new rewriting rule generation. The set of
  rules differs from instance to instance. We implemented our approach
  in the framework of an algorithm for equivalence and constant
  propagation, called 0-saturation, which we extended from purely
  propositional reasoning to bit-vector reasoning. Our approach
  results in a substantial performance improvement in a
  state-of-the-art SMT solver over various SMT-LIB families.},
  booktitle ={Proceedings of the 16th International Conference on
  Computer Aided Verification - Volume 8559},
  pages ={663–679},
  numpages =17
}

@phdthesis{hansen,
  author ={Hansen, Trevor Alexander},
  advisor ={Schachte, Peter and Søndergaard, Harald},
  title ={A constraint solver and its application to machine code test
  generation.},
  year =2012,
  publisher ={The University of Melbourne},
  address ={Melbourne, Australia},
}

@inproceedings{relay,
  author ={Roesch, Jared and Lyubomirsky, Steven and Weber, Logan and
  Pollock, Josh and Kirisame, Marisa and Chen, Tianqi and Tatlock,
  Zachary},
  title ={Relay: A New IR for Machine Learning Frameworks},
  year =2018,
  isbn =9781450358347,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3211346.3211348},
  doi ={10.1145/3211346.3211348},
  abstract ={Machine learning powers diverse services in industry
  including search, translation, recommendation systems, and
  security. The scale and importance of these models require that they
  be efficient, expressive, and portable across an array of
  heterogeneous hardware devices. These constraints are often at odds;
  in order to better accommodate them we propose a new high-level
  intermediate representation (IR) called Relay. Relay is being
  designed as a purely-functional, statically-typed language with the
  goal of balancing efficient compilation, expressiveness, and
  portability. We discuss the goals of Relay and highlight its
  important design constraints. Our prototype is part of the open
  source NNVM compiler framework, which powers Amazon's deep learning
  framework MxNet.},
  booktitle ={Proceedings of the 2nd ACM SIGPLAN International
  Workshop on Machine Learning and Programming Languages},
  pages ={58–68},
  numpages =11,
  keywords ={machine learning, differentiable programming, compilers,
  intermediate representation},
  location ={Philadelphia, PA, USA},
  series ={MAPL 2018}
}

@inproceedings{bansal,
  author ={Bansal, Sorav and Aiken, Alex},
  title ={Automatic Generation of Peephole Superoptimizers},
  year =2006,
  isbn =1595934510,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/1168857.1168906},
  doi ={10.1145/1168857.1168906},
  abstract ={Peephole optimizers are typically constructed using
  human-written pattern matching rules, an approach that requires
  expertise and time, as well as being less than systematic at
  exploiting all opportunities for optimization. We explore fully
  automatic construction of peephole optimizers using brute force
  superoptimization. While the optimizations discovered by our
  automatic system may be less general than human-written
  counterparts, our approach has the potential to automatically learn
  a database of thousands to millions of optimizations, in contrast to
  the hundreds found in current peephole optimizers. We show
  experimentally that our optimizer is able to exploit performance
  opportunities not found by existing compilers; in particular, we
  show speedups from 1.7 to a factor of 10 on some compute intensive
  kernels over a conventional optimizing compiler.},
  booktitle ={Proceedings of the 12th International Conference on
  Architectural Support for Programming Languages and Operating
  Systems},
  pages ={394–403},
  numpages =10,
  keywords ={superoptimization, code selection, peephole optimization},
  location ={San Jose, California, USA},
  series ={ASPLOS XII}
}

@inproceedings{dias-ramsey,
  author ={Dias, Jo\~{a}o and Ramsey, Norman},
  title ={Automatically Generating Instruction Selectors Using
  Declarative Machine Descriptions},
  year =2010,
  isbn =9781605584799,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/1706299.1706346},
  doi ={10.1145/1706299.1706346},
  abstract ={Despite years of work on retargetable compilers, creating
  a good, reliable back end for an optimizing compiler still entails a
  lot of hard work. Moreover, a critical component of the back
  end---the instruction selector---must be written by a person who is
  expert in both the compiler's intermediate code and the target
  machine's instruction set. By generating the instruction selector
  from declarative machine descriptions we have (a) made it
  unnecessary for one person to be both a compiler expert and a
  machine expert, and (b) made creating an optimizing back end easier
  than ever before.Our achievement rests on two new results. First,
  finding a mapping from intermediate code to machine code is an
  undecidable problem. Second, using heuristic search, we can find
  mappings for machines of practical interest in at most a few minutes
  of CPU time. Our most significant new idea is that heuristic search
  should be controlled by algebraic laws. Laws are used not only to
  show when a sequence of instructions implements part of an
  intermediate code, but also to limit the search: we drop a sequence
  of instructions not when it gets too long or when it computes too
  complicated a result, but when too much reasoning will be required
  to show that the result computed might be useful.},
  booktitle ={Proceedings of the 37th Annual ACM SIGPLAN-SIGACT
  Symposium on Principles of Programming Languages},
  pages ={403–416},
  numpages =14,
  keywords ={retargetable compilers, declarative machine descriptions,
  instruction selection},
  location ={Madrid, Spain},
  series ={POPL '10}
}

@inproceedings{alive-infer,
  author ={Menendez, David and Nagarakatte, Santosh},
  title ={Alive-Infer: Data-Driven Precondition Inference for Peephole
  Optimizations in LLVM},
  year =2017,
  isbn =9781450349888,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3062341.3062372},
  doi ={10.1145/3062341.3062372},
  abstract ={ Peephole optimizations are a common source of compiler
  bugs. Compiler developers typically transform an incorrect peephole
  optimization into a valid one by strengthening the
  precondition. This process is challenging and tedious. This paper
  proposes Alive-Infer, a data-driven approach that infers
  preconditions for peephole optimizations expressed in
  Alive. Alive-Infer generates positive and negative examples for an
  optimization, enumerates predicates on-demand, and learns a set of
  predicates that separate the positive and negative
  examples. Alive-Infer repeats this process until it finds a
  precondition that ensures the validity of the
  optimization. Alive-Infer reports both a weakest precondition and a
  set of succinct partial preconditions to the developer. Our
  prototype generates preconditions that are weaker than LLVM’s
  preconditions for 73 optimizations in the Alive suite. We also
  demonstrate the applicability of this technique to generalize 54
  optimization patterns generated by Souper, an LLVM IR–based
  superoptimizer. },
  booktitle ={Proceedings of the 38th ACM SIGPLAN Conference on
  Programming Language Design and Implementation},
  pages ={49–63},
  numpages =15,
  keywords ={Learning, Inference, Compilers, Alive},
  location ={Barcelona, Spain},
  series ={PLDI 2017}
}

@inproceedings{alive-fp,
  author ={David Menendez and Santosh Nagarakatte and Aarti Gupta},
  editor ={Xavier Rival},
  title ={Alive-FP: Automated Verification of Floating Point Based
               Peephole Optimizations in {LLVM}},
  booktitle ={Static Analysis - 23rd International Symposium, {SAS}
               2016, Edinburgh, UK, September 8-10, 2016, Proceedings},
  series ={Lecture Notes in Computer Science},
  volume =9837,
  pages ={317--337},
  publisher ={Springer},
  year =2016,
  url ={https://doi.org/10.1007/978-3-662-53413-7\_16},
  doi ={10.1007/978-3-662-53413-7\_16},
  timestamp ={Tue, 14 May 2019 10:00:52 +0200},
  biburl ={https://dblp.org/rec/conf/sas/MenendezNG16.bib},
  bibsource ={dblp computer science bibliography, https://dblp.org}
}

@article {helm,
  author ={Chenming Wu and Haisen Zhao and Chandrakana Nandi and
  Jeffrey I. Lipton and Zachary Tatlock and Adriana Schulz},
  title ={Carpentry Compiler},
  journal ={ACM Transactions on Graphics},
  note ={presented at SIGGRAPH Asia 2019},
  volume =38,
  number =6,
  pages ={Article No. 195},
  year =2019
}

@inproceedings{diospyros,
  author ={VanHattum, Alexa and Nigam, Rachit and Lee, Vincent T. and
  Bornholt, James and Sampson, Adrian},
  title ={Vectorization for Digital Signal Processors via Equality
  Saturation},
  year =2021,
  isbn =9781450383172,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3445814.3446707},
  doi ={10.1145/3445814.3446707},
  abstract ={Applications targeting digital signal processors (DSPs)
  benefit from fast implementations of small linear algebra
  kernels. While existing auto-vectorizing compilers are effective at
  extracting performance from large kernels, they struggle to invent
  the complex data movements necessary to optimize small kernels. To
  get the best performance, DSP engineers must hand-write and tune
  specialized small kernels for a wide spectrum of applications and
  architectures. We present Diospyros, a search-based compiler that
  automatically finds efficient vectorizations and data layouts for
  small linear algebra kernels. Diospyros combines symbolic evaluation
  and equality saturation to vectorize computations with irregular
  structure. We show that a collection of Diospyros-compiled kernels
  outperform implementations from existing DSP libraries by
  3.1\texttimes{} on average, that Diospyros can generate kernels that
  are competitive with expert-tuned code, and that optimizing these
  small kernels offers end-to-end speedup for a DSP application.},
  booktitle ={Proceedings of the 26th ACM International Conference on
  Architectural Support for Programming Languages and Operating
  Systems},
  pages ={874–886},
  numpages =13,
  keywords ={DSPs, Vectorization, Program Synthesis, Equality
  Saturation},
  location ={Virtual, USA},
  series ={ASPLOS 2021}
}

@inproceedings{yogo,
  author ={Premtoon, Varot and Koppel, James and Solar-Lezama,
  Armando},
  title ={Semantic Code Search via Equational Reasoning},
  year =2020,
  isbn =9781450376136,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/3385412.3386001},
  doi ={10.1145/3385412.3386001},
  booktitle ={Proceedings of the 41st ACM SIGPLAN Conference on
  Programming Language Design and Implementation},
  pages ={1066–1082},
  numpages =17,
  keywords ={equational reasoning, code search},
  location ={London, UK},
  series ={PLDI 2020}
}

@article{julie-halide,
  author ={Julie L. Newcomb and Steven Johnson and Shoaib Kamil and
               Andrew Adams and Ratislav Bodik},
  title ={Verifying and Improving Halide’s Term Rewriting System with
  Program Synthesis},
  journal ={Proceedings of the {ACM} on Programming Languages (OOPLSA)},
  year =2020,
}

@incollection{knuth1983simple,
  title ={Simple word problems in universal algebras},
  author ={Knuth, Donald E and Bendix, Peter B},
  booktitle ={Automation of Reasoning},
  pages ={342--376},
  year =1983,
  publisher ={Springer}
}

@inproceedings{visser2001stratego,
  title ={Stratego: A language for program transformation based on
  rewriting strategies system description of stratego 0.5},
  author ={Visser, Eelco},
  booktitle ={International Conference on Rewriting Techniques and
  Applications},
  pages ={357--361},
  year =2001,
  organization ={Springer}
}

@inproceedings{bachmair2000congruence,
  title ={Congruence closure modulo associativity and commutativity},
  author ={Bachmair, Leo and Ramakrishnan, IV and Tiwari, Ashish and
  Vigneron, Laurent},
  booktitle ={International Workshop on Frontiers of Combining
  Systems},
  pages ={245--259},
  year =2000,
  organization ={Springer}
}

@article{dershowitz1987termination,
  title ={Termination of rewriting},
  author ={Dershowitz, Nachum},
  journal ={Journal of symbolic computation},
  volume =3,
  number ={1-2},
  pages ={69--115},
  year =1987,
  publisher ={Elsevier}
}

@article{dershowitz1982orderings,
  title ={Orderings for term-rewriting systems},
  author ={Dershowitz, Nachum},
  journal ={Theoretical computer science},
  volume =17,
  number =3,
  pages ={279--301},
  year =1982,
  publisher ={Elsevier}
}

@article{mpfr,
  author ={Fousse, Laurent and Hanrot, Guillaume and Lef\`{e}vre,
  Vincent and P\'{e}lissier, Patrick and Zimmermann, Paul},
  title ={MPFR: A Multiple-Precision Binary Floating-Point Library
  with Correct Rounding},
  year =2007,
  issue_date ={June 2007},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =33,
  number =2,
  issn ={0098-3500},
  url ={https://doi.org/10.1145/1236463.1236468},
  doi ={10.1145/1236463.1236468},
  abstract ={This article presents a multiple-precision binary
  floating-point library, written in the ISO C language, and based on
  the GNU MP library. Its particularity is to extend to
  arbitrary-precision, ideas from the IEEE 754 standard, by providing
  correct rounding and exceptions. We demonstrate how these strong
  semantics are achieved---with no significant slowdown with respect
  to other arbitrary-precision tools---and discuss a few applications
  where such a library can be useful.},
  journal ={ACM Trans. Math. Softw.},
  month =jun,
  pages ={13–es},
  numpages =15,
  keywords ={portable software, Multiple-precision arithmetic, correct
  rounding, floating-point arithmetic, IEEE 754 standard, elementary
  function}
}

@article{cond-stoke,
  author ={Sharma, Rahul and Schkufza, Eric and Churchill, Berkeley
  and Aiken, Alex},
  title ={Conditionally Correct Superoptimization},
  year =2015,
  issue_date ={October 2015},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =50,
  number =10,
  issn ={0362-1340},
  url ={https://doi.org/10.1145/2858965.2814278},
  doi ={10.1145/2858965.2814278},
  abstract ={ The aggressive optimization of heavily used kernels is
  an important problem in high-performance computing. However, both
  general purpose compilers and highly specialized tools such as
  superoptimizers often do not have sufficient static knowledge of
  restrictions on program inputs that could be exploited to produce
  the very best code. For many applications, the best possible code is
  conditionally correct: the optimized kernel is equal to the code
  that it replaces only under certain preconditions on the kernel's
  inputs. The main technical challenge in producing conditionally
  correct optimizations is in obtaining non-trivial and useful
  conditions and proving conditional equivalence formally in the
  presence of loops. We combine abstract interpretation, decision
  procedures, and testing to yield a verification strategy that can
  address both of these problems. This approach yields a
  superoptimizer for x86 that in our experiments produces binaries
  that are often multiple times faster than those produced by
  production compilers. },
  journal ={SIGPLAN Not.},
  month =oct,
  pages ={147–162},
  numpages =16,
  keywords ={x86, SMT, Optimization, Verification, Binary Analysis,
  Markov Chain Monte Carlo, Superoptimization, Compilers}
}

@inproceedings{float-stoke,
  author ={Schkufza, Eric and Sharma, Rahul and Aiken, Alex},
  title ={Stochastic Optimization of Floating-Point Programs with
  Tunable Precision},
  year =2014,
  isbn =9781450327848,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/2594291.2594302},
  doi ={10.1145/2594291.2594302},
  abstract ={The aggressive optimization of floating-point
  computations is an important problem in high-performance
  computing. Unfortunately, floating-point instruction sets have
  complicated semantics that often force compilers to preserve
  programs as written. We present a method that treats floating-point
  optimization as a stochastic search problem. We demonstrate the
  ability to generate reduced precision implementations of Intel's
  handwritten C numeric library which are up to 6 times faster than
  the original code, and achieve end-to-end speedups of over 30% on a
  direct numeric simulation and a ray tracer by optimizing kernels
  that can tolerate a loss of precision while still remaining
  correct. Because these optimizations are mostly not amenable to
  formal verification using the current state of the art, we present a
  stochastic search technique for characterizing maximum error. The
  technique comes with an asymptotic guarantee and provides strong
  evidence of correctness.},
  booktitle ={Proceedings of the 35th ACM SIGPLAN Conference on
  Programming Language Design and Implementation},
  pages ={53–64},
  numpages =12,
  keywords ={64-bit, x86-64, stochastic search, MCMC, floating-point,
  binary, x86, Markov Chain Monte Carlo, precision, SMT},
  location ={Edinburgh, United Kingdom},
  series ={PLDI '14}
}

@inproceedings{cvc4,
  author ={Barrett, Clark and Conway, Christopher L. and Deters,
  Morgan and Hadarean, Liana and Jovanovi\'{c}, Dejan and King, Tim
  and Reynolds, Andrew and Tinelli, Cesare},
  title ={CVC4},
  year =2011,
  isbn =9783642221095,
  publisher ={Springer-Verlag},
  address ={Berlin, Heidelberg},
  abstract ={CVC4 is the latest version of the Cooperating Validity
  Checker. A joint project of NYU and U Iowa, CVC4 aims to support the
  useful feature set of CVC3 and SMT-LIBv2 while optimizing the design
  of the core system architecture and decision procedures to take
  advantage of recent engineering and algorithmic advances. CVC4
  represents a completely new code base; it is a from-scratch rewrite
  of CVC3, and many subsystems have been completely
  redesigned. Additional decision procedures for CVC4 are currently
  under development, but for what it currently achieves, it is a
  lighter-weight and higher-performing tool than CVC3. We describe the
  system architecture, subsystems of note, and discuss some
  applications and continuing work.},
  booktitle ={Proceedings of the 23rd International Conference on
  Computer Aided Verification},
  pages ={171–177},
  numpages =7,
  location ={Snowbird, UT},
  series ={CAV'11}
}

@inproceedings{peek,
  author ={Mullen, Eric and Zuniga, Daryl and Tatlock, Zachary and
  Grossman, Dan},
  title ={Verified Peephole Optimizations for CompCert},
  year =2016,
  isbn =9781450342612,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/2908080.2908109},
  doi ={10.1145/2908080.2908109},
  abstract ={ Transformations over assembly code are common in many
  compilers. These transformations are also some of the most bug-dense
  compiler components. Such bugs could be elim- inated by formally
  verifying the compiler, but state-of-the- art formally verified
  compilers like CompCert do not sup- port assembly-level program
  transformations. This paper presents Peek, a framework for
  expressing, verifying, and running meaning-preserving assembly-level
  program trans- formations in CompCert. Peek contributes four new
  com- ponents: a lower level semantics for CompCert x86 syntax, a
  liveness analysis, a library for expressing and verifying peephole
  optimizations, and a verified peephole optimiza- tion pass built
  into CompCert. Each of these is accompanied by a correctness proof
  in Coq against realistic assumptions about the calling convention
  and the system memory alloca- tor. Verifying peephole optimizations
  in Peek requires prov- ing only a set of local properties, which we
  have proved are sufficient to ensure global transformation
  correctness. We have proven these local properties for 28 peephole
  transfor- mations from the literature. We discuss the development of
  our new assembly semantics, liveness analysis, representa- tion of
  program transformations, and execution engine; de- scribe the
  verification challenges of each component; and detail techniques we
  applied to mitigate the proof burden. },
  booktitle ={Proceedings of the 37th ACM SIGPLAN Conference on
  Programming Language Design and Implementation},
  pages ={448–461},
  numpages =14,
  keywords ={Coq, Formal Methods, Compilers, Verification, Peek,
  CompCert},
  location ={Santa Barbara, CA, USA},
  series ={PLDI '16}
}

@book{isabelle,
  author ={Nipkow, Tobias and Wenzel, Markus and Paulson, Lawrence C.},
  title ={Isabelle/HOL: A Proof Assistant for Higher-Order Logic},
  year =2002,
  isbn =3540433767,
  publisher ={Springer-Verlag},
  address ={Berlin, Heidelberg}
}

@book{coq,
  author ={Bertot, Yves and Castran, Pierre},
  title ={Interactive Theorem Proving and Program Development: Coq'Art
  The Calculus of Inductive Constructions},
  year =2010,
  isbn =3642058809,
  publisher ={Springer Publishing Company, Incorporated},
  edition ={1st},
  abstract ={A practical introduction to the development of proofs and
  certified programs using Coq. An invaluable tool for researchers,
  students, and engineers interested in formal methods and the
  development of zero-fault software.}
}

@article{visser2001survey,
  title ={A survey of rewriting strategies in program transformation
  systems},
  author ={Visser, Eelco},
  journal ={Electronic Notes in Theoretical Computer Science},
  volume =57,
  number =2,
  year =2001,
  publisher ={Elsevier}
}

@article{zeller2002simplifying,
  title ={Simplifying and isolating failure-inducing input},
  author ={Zeller, Andreas and Hildebrandt, Ralf},
  journal ={IEEE Transactions on Software Engineering},
  volume =28,
  number =2,
  pages ={183--200},
  year =2002,
  publisher ={IEEE}
}

@incollection{kirchner2015rewriting,
  title ={Rewriting strategies and strategic rewrite programs},
  author ={Kirchner, H{\'e}l{\`e}ne},
  booktitle ={Logic, Rewriting, and Concurrency},
  pages ={380--403},
  year =2015,
  publisher ={Springer}
}

@inproceedings{barendregt1987term,
  title ={Term graph rewriting},
  author ={Barendregt, Hendrik Pieter and van Eekelen, Marko CJD and
  Glauert, John RW and Kennaway, J Richard and Plasmeijer, Marinus J
  and Sleep, M Ronan},
  booktitle ={International conference on parallel architectures and
  languages Europe},
  pages ={141--158},
  year =1987,
  organization ={Springer}
}

@article{borovansky1998overview,
  title ={An overview of ELAN},
  author ={Borovansk{\`y}, Peter and Kirchner, Claude and Kirchner,
  H{\'e}lene and Moreau, Pierre-Etienne and Ringeissen, Christophe},
  journal ={Electronic Notes in Theoretical Computer Science},
  volume =15,
  pages ={55--70},
  year =1998,
  publisher ={Elsevier}
}

@inproceedings{lucas2001termination,
  title ={Termination of rewriting with strategy annotations},
  author ={Lucas, Salvador},
  booktitle ={International Conference on Logic for Programming
  Artificial Intelligence and Reasoning},
  pages ={669--684},
  year =2001,
  organization ={Springer}
}

@book{clavel2007all,
  title ={All About Maude-A High-Performance Logical Framework: How to
  Specify, Program, and Verify Systems in Rewriting Logic},
  author ={Clavel, Manuel and Dur{\'a}n, Francisco and Eker, Steven
  and Lincoln, Patrick and Mart{\'\i}-Oliet, Narciso and Meseguer,
  Jos{\'e} and Talcott, Carolyn},
  volume =4350,
  year =2007,
  publisher ={Springer}
}

@inproceedings{peled1998ten,
  title ={Ten years of partial order reduction},
  author ={Peled, Doron},
  booktitle ={International Conference on Computer Aided Verification},
  pages ={17--28},
  year =1998,
  organization ={Springer}
}

@inproceedings{eker2003associative,
  title ={Associative-commutative rewriting on large terms},
  author ={Eker, Steven},
  booktitle ={International Conference on Rewriting Techniques and
  Applications},
  pages ={14--29},
  year =2003,
  organization ={Springer}
}

@inproceedings{halide,
  author ={Ragan-Kelley, Jonathan and Barnes, Connelly and Adams,
  Andrew and Paris, Sylvain and Durand, Fr\'{e}do and Amarasinghe,
  Saman},
  title ={Halide: A Language and Compiler for Optimizing Parallelism,
  Locality, and Recomputation in Image Processing Pipelines},
  year =2013,
  isbn =9781450320146,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/2491956.2462176},
  doi ={10.1145/2491956.2462176},
  abstract ={Image processing pipelines combine the challenges of
  stencil computations and stream programs. They are composed of large
  graphs of different stencil stages, as well as complex reductions,
  and stages with global or data-dependent access patterns. Because of
  their complex structure, the performance difference between a naive
  implementation of a pipeline and an optimized one is often an order
  of magnitude. Efficient implementations require optimization of both
  parallelism and locality, but due to the nature of stencils, there
  is a fundamental tension between parallelism, locality, and
  introducing redundant recomputation of shared values.We present a
  systematic model of the tradeoff space fundamental to stencil
  pipelines, a schedule representation which describes concrete points
  in this space for each stage in an image processing pipeline, and an
  optimizing compiler for the Halide image processing language that
  synthesizes high performance implementations from a Halide algorithm
  and a schedule. Combining this compiler with stochastic search over
  the space of schedules enables terse, composable programs to achieve
  state-of-the-art performance on a wide range of real image
  processing pipelines, and across different hardware architectures,
  including multicores with SIMD, and heterogeneous CPU+GPU
  execution. From simple Halide programs written in a few hours, we
  demonstrate performance up to 5x faster than hand-tuned C,
  intrinsics, and CUDA implementations optimized by experts over weeks
  or months, for image processing applications beyond the reach of
  past automatic compilers.},
  booktitle ={Proceedings of the 34th ACM SIGPLAN Conference on
  Programming Language Design and Implementation},
  pages ={519–530},
  numpages =12,
  keywords ={vectorization, optimization, domain specific language,
  image processing, parallelism, autotuning, gpu, locality, redundant
  computation, compiler},
  location ={Seattle, Washington, USA},
  series ={PLDI '13}
}

@misc{gcc,
  title ={{GCC} online documentation},
  note ={\url{https://gcc.gnu.org/onlinedocs/}},
  year =2021,
}

@misc{mlir-rw,
  title ={{MLIR} Generic DAG Rewriter Infrastructure},
  note
  ={\url{https://mlir.llvm.org/docs/Rationale/RationaleGenericDAGRewriter/}},
  year =2021,
}

@misc{rosette-guide,
  author ={Rosette},
  title ={{GCC} online documentation},
  note ={\url{https://docs.racket-lang.org/rosette-guide/index.html}},
  year =2021,
}

@misc{herbie-issues,
  author ={Herbie},
  title ={Optimize floating-point expressions for accuracy },
  note ={\url{https://github.com/uwplse/herbie/issues}},
  year =2021,
}

@misc{herbie-bug,
  author ={Herbie},
  title ={Herbie can generate more-complex expressions that aren't
  more precise},
  note
  ={\url{https://github.com/uwplse/herbie/issues/261\#issuecomment-680896733}},
  year =2021,
}

@misc{racket,
  author ={Racket},
  title ={Racket, the {P}rogramming {L}anguage},
  note ={\url{https://racket-lang.org/}},
  year =2021,
}

@misc{rust-bigint,
  author ={Rust},
  title ={{Rust} Big{Int} {L}ibrary},
  note
  ={\url{https://docs.rs/num-bigint/0.4.0/num_bigint/struct.BigInt.html}},
  year =2021,
}

@misc{rust-rat,
  author ={Rust},
  title ={{Rust} {R}ational {L}ibrary},
  note
  ={\url{https://docs.rs/num-rational/0.4.0/num_rational/struct.Ratio.html}},
  year =2021,
}

@inproceedings{rosette,
  author ={Torlak, Emina and Bodik, Rastislav},
  title ={Growing Solver-Aided Languages with Rosette},
  year =2013,
  isbn =9781450324724,
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  url ={https://doi.org/10.1145/2509578.2509586},
  doi ={10.1145/2509578.2509586},
  abstract ={SAT and SMT solvers have automated a spectrum of
  programming tasks, including program synthesis, code checking, bug
  localization, program repair, and programming with oracles. In
  principle, we obtain all these benefits by translating the program
  (once) to a constraint system understood by the solver. In practice,
  however, compiling a language to logical formulas is a tricky
  process, complicated by having to map the solution back to the
  program level and extend the language with new solver-aided
  constructs, such as symbolic holes used in synthesis.This paper
  introduces ROSETTE, a framework for designing solver-aided
  languages. ROSETTE is realized as a solver-aided language embedded
  in Racket, from which it inherits extensive support for
  meta-programming. Our framework frees designers from having to
  compile their languages to constraints: new languages, and their
  solver-aided constructs, are defined by shallow (library-based) or
  deep (interpreter-based) embedding in ROSETTE itself.We describe
  three case studies, by ourselves and others, of using ROSETTE to
  implement languages and synthesizers for web scraping, spatial
  programming, and superoptimization of bitvector programs.},
  booktitle ={Proceedings of the 2013 ACM International Symposium on
  New Ideas, New Paradigms, and Reflections on Programming & Software},
  pages ={135–152},
  numpages =18,
  keywords ={solver-aided languages},
  location ={Indianapolis, Indiana, USA},
  series ={Onward! 2013}
}

@InProceedings{haskell,
  author ={Peyton Jones, Simon and Tolmach, Andrew and Hoare, Tony},
  title ={Playing by the rules: rewriting as a practical optimisation
  technique in GHC},
  organization ={ACM SIGPLAN},
  booktitle ={2001 Haskell Workshop},
  year =2001,
  month ={September},
  abstract ={We describe a facility for improving optimization of
Haskell programs using rewrite rules. Library authors can use rules to
express domain-specific optimizations that the compiler cannot
discover for itself. The compiler can also generate rules internally
to propagate information obtained from automated analyses. The rewrite
mechanism is fully implemented in the released Glasgow Haskell
Compiler.  Our system is very simple, but can be effective in
optimizing real programs. We describe two practical applications
involving short-cut deforestation, for lists and for rose trees, and
document substantial performance improvements on a range of programs.},
  url
  ={https://www.microsoft.com/en-us/research/publication/playing-by-the-rules-rewriting-as-a-practical-optimisation-technique-in-ghc/},
  edition ={2001 Haskell Workshop},
}

@book{traat,
  place ={Cambridge},
  title ={Term Rewriting and All That},
  DOI ={10.1017/CBO9781139172752},
  publisher ={Cambridge University Press},
  author ={Baader, Franz and Nipkow, Tobias},
  year =1998
}

@book{terese,
  title ={Term Rewriting Systems},
  author ={Bezem, M. and Klop, J.W. and Barendsen, E. and de Vrijer,
  R. and Terese},
  isbn =9780521391153,
  lccn =2002067658,
  series ={Cambridge Tracts in Theoretical Computer Science},
  url ={https://books.google.ca/books?id=oe3QKzhFEBAC},
  year =2003,
  publisher ={Cambridge University Press}
}

@InProceedings{rw-syn1,
  author ="Baaij, Christiaan and Kuper, Jan",
  editor ="McCarthy, Jay",
  title ="Using Rewriting to Synthesize Functional Languages to
  Digital Circuits",
  booktitle ="Trends in Functional Programming",
  year =2014,
  publisher ="Springer Berlin Heidelberg",
  address ="Berlin, Heidelberg",
  pages ="17--33",
  abstract ="A straightforward synthesis from functional languages to
  digital circuits transforms variables to wires. The types of these
  variables determine the bit-width of the wires. Assigning a
  bit-width to polymorphic and function-type variables within this
  direct synthesis scheme is impossible. Using a term rewrite system,
  polymorphic and function-type binders can be completely eliminated
  from a circuit description, given only minor and reasonable
  restrictions on the input. The presented term rewrite system is used
  in the compiler for C$\lambda$aSH: a polymorphic, higher-order,
  functional hardware description language.",
  isbn ="978-3-642-45340-3"
}

@article{rw-syn2,
  author ={Mariano, Benjamin and Reese, Josh and Xu, Siyuan and
  Nguyen, ThanhVu and Qiu, Xiaokang and Foster, Jeffrey S. and
  Solar-Lezama, Armando},
  title ={Program Synthesis with Algebraic Library Specifications},
  year =2019,
  issue_date ={October 2019},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =3,
  number ={OOPSLA},
  url ={https://doi.org/10.1145/3360558},
  doi ={10.1145/3360558},
  abstract ={A key challenge in program synthesis is synthesizing
  programs that use libraries, which most real-world software
  does. The current state of the art is to model libraries with mock
  library implementations that perform the same function in a simpler
  way. However, mocks may still be large and complex, and must include
  many implementation details, both of which could limit synthesis
  performance. To address this problem, we introduce JLibSketch, a
  Java program synthesis tool that allows library behavior to be
  described with algebraic specifications, which are rewrite rules for
  sequences of method calls, e.g., encryption followed by decryption
  (with the same key) is the identity. JLibSketch implements rewrite
  rules by compiling JLibSketch problems into problems for the Sketch
  program synthesis tool. More specifically, after compilation,
  library calls are represented by abstract data types (ADTs), and
  rewrite rules manipulate those ADTs. We formalize compilation and
  prove it sound and complete if the rewrite rules are ordered and
  non-unifiable. We evaluated JLibSketch by using it to synthesize
  nine programs that use libraries from three domains: data
  structures, cryptography, and file systems. We found that algebraic
  specifications are, on average, about half the size of mocks. We
  also found that algebraic specifications perform better than mocks
  on seven of the nine programs, sometimes significantly so, and
  perform equally well on the last two programs. Thus, we believe that
  JLibSketch takes an important step toward synthesis of programs that
  use libraries.},
  journal ={Proc. ACM Program. Lang.},
  month =oct,
  articleno =132,
  numpages =25,
  keywords ={Algebraic Specification, Term Rewriting, Java,
  Sketch-based Program Synthesis}
}

@article{tarjan,
  author ={Tarjan, Robert Endre},
  title ={Efficiency of a Good But Not Linear Set Union Algorithm},
  year =1975,
  issue_date ={April 1975},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =22,
  number =2,
  issn ={0004-5411},
  url ={https://doi.org/10.1145/321879.321884},
  doi ={10.1145/321879.321884},
  journal ={J. ACM},
  month =apr,
  pages ={215–225},
  numpages =11
}

@book{sygus,
  title ={Syntax-guided synthesis},
  author ={Alur, Rajeev and Bodik, Rastislav and Juniwal, Garvit and
  Martin, Milo MK and Raghothaman, Mukund and Seshia, Sanjit A and
  Singh, Rishabh and Solar-Lezama, Armando and Torlak, Emina and
  Udupa, Abhishek},
  year =2013,
  publisher ={IEEE}
}

@article{bitwuzla,
  author ={Aina Niemetz and Mathias Preiner},
  title ={Bitwuzla at the {SMT-COMP} 2020},
  journal ={CoRR},
  volume ={abs/2006.01621},
  year =2020,
  url ={https://arxiv.org/abs/2006.01621},
  archivePrefix ={arXiv},
  eprint ={2006.01621},
  biburl ={https://dblp.org/rec/journals/corr/abs-2006-01621.bib},
  bibsource ={dblp computer science bibliography, https://dblp.org}
}

@Inbook{arvind-hw-synth-rw,
  author ="Hoe, James C.  and Arvind",
  title ="Hardware Synthesis from Term Rewriting Systems",
  bookTitle ="VLSI: Systems on a Chip: IFIP TC10 WG10.5 Tenth
  International Conference on Very Large Scale Integration (VLSI'99)
  December 1--4, 1999, Lisboa, Portugal",
  year =2000,
  publisher ="Springer US",
  address ="Boston, MA",
  pages ="595--619",
  isbn ="978-0-387-35498-9",
  doi ="10.1007/978-0-387-35498-9_52",
  url ="https://doi.org/10.1007/978-0-387-35498-9_52"
}

@article{isel-survey,
  author ={Gabriel Hjort Blindell},
  title ={Survey on Instruction Selection: An Extensive and Modern
               Literature Review},
  journal ={CoRR},
  volume ={abs/1306.4898},
  year =2013,
  url ={http://arxiv.org/abs/1306.4898},
  archivePrefix ={arXiv},
  eprint ={1306.4898},
  timestamp ={Mon, 13 Aug 2018 16:48:27 +0200},
  biburl ={https://dblp.org/rec/journals/corr/Blindell13.bib},
  bibsource ={dblp computer science bibliography, https://dblp.org}
}

@article{phase-ordering,
  author ={Whitfield, Deborah L. and Soffa, Mary Lou},
  title ={An Approach for Exploring Code Improving Transformations},
  year =1997,
  issue_date ={Nov. 1997},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =19,
  number =6,
  issn ={0164-0925},
  url ={https://doi.org/10.1145/267959.267960},
  doi ={10.1145/267959.267960},
  journal ={ACM Trans. Program. Lang. Syst.},
  month =nov,
  pages ={1053–1084},
  numpages =32,
  keywords ={parallelizing transformations, automatic generation of
  optimizers, specification of program optimizations, enabling and
  disabling of optimizations, code-improving transformations}
}

@MISC{smtlib,
  author ={Clark Barrett and Pascal Fontaine and Cesare Tinelli},
  title ={{The Satisfiability Modulo Theories Library (SMT-LIB)}},
  howpublished ={{\tt www.SMT-LIB.org}},
  year =2016,
}

@article{peephole,
  author ={McKeeman, W. M.},
  title ={Peephole Optimization},
  year =1965,
  issue_date ={July 1965},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =8,
  number =7,
  issn ={0001-0782},
  url ={https://doi.org/10.1145/364995.365000},
  doi ={10.1145/364995.365000},
  abstract ={Redundant instructions may be discarded during the final
  stage of compilation by using a simple optimizing technique called
  peephole optimization. The method is described and examples are
  given.},
  journal ={Commun. ACM},
  month =jul,
  pages ={443–444},
  numpages =2
}

@article{10.1145/36177.36194,
  author ={Massalin, Henry},
  title ={Superoptimizer: A Look at the Smallest Program},
  year =1987,
  issue_date ={Oct. 1987},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =15,
  number =5,
  issn ={0163-5964},
  url ={https://doi.org/10.1145/36177.36194},
  doi ={10.1145/36177.36194},
  abstract ={Given an instruction set, the superoptimizer finds the
  shortest program to compute a function. Startling programs have been
  generated, many of them engaging in convoluted bit-fiddling bearing
  little resemblance to the source programs which defined the
  functions. The key idea in the superoptimizer is a probabilistic
  test that makes exhaustive searches practical for programs of useful
  size. The search space is defined by the processor's instruction
  set, which may include the whole set, but it is typically restricted
  to a subset. By constraining the instructions and observing the
  effect on the output program, one can gain insight into the design
  of instruction sets. In addition, superoptimized programs may be
  used by peephole optimizers to improve the quality of generated
  code, or by assembly language programmers to improve manually
  written code.},
  journal ={SIGARCH Comput. Archit. News},
  month =oct,
  pages ={122–126},
  numpages =5
}

@inproceedings{superoptimization,
  author ={Massalin, Henry},
  title ={Superoptimizer: A Look at the Smallest Program},
  year =1987,
  isbn =0818608056,
  publisher ={IEEE Computer Society Press},
  address ={Washington, DC, USA},
  url ={https://doi.org/10.1145/36206.36194},
  doi ={10.1145/36206.36194},
  abstract ={Given an instruction set, the superoptimizer finds the
  shortest program to compute a function. Startling programs have been
  generated, many of them engaging in convoluted bit-fiddling bearing
  little resemblance to the source programs which defined the
  functions. The key idea in the superoptimizer is a probabilistic
  test that makes exhaustive searches practical for programs of useful
  size. The search space is defined by the processor's instruction
  set, which may include the whole set, but it is typically restricted
  to a subset. By constraining the instructions and observing the
  effect on the output program, one can gain insight into the design
  of instruction sets. In addition, superoptimized programs may be
  used by peephole optimizers to improve the quality of generated
  code, or by assembly language programmers to improve manually
  written code.},
  booktitle ={Proceedings of the Second International Conference on
  Architectual Support for Programming Languages and Operating
  Systems},
  pages ={122–126},
  numpages =5,
  location ={Palo Alto, California, USA},
  series ={ASPLOS II}
}

@article{hashconsing,
  author ={Ershov, A. P.},
  title ={On Programming of Arithmetic Operations},
  year =1958,
  issue_date ={Aug. 1958},
  publisher ={Association for Computing Machinery},
  address ={New York, NY, USA},
  volume =1,
  number =8,
  issn ={0001-0782},
  url
  ={https://doi-org.offcampus.lib.washington.edu/10.1145/368892.368907},
  doi ={10.1145/368892.368907},
  abstract ={The concepts used without explanation are taken from
  [1].},
  journal ={Commun. ACM},
  month =aug,
  pages ={3–6},
  numpages =4
}

@inproceedings {tvm,
author = {Tianqi Chen and Thierry Moreau and Ziheng Jiang and Lianmin Zheng and Eddie Yan and Haichen Shen and Meghan Cowan and Leyuan Wang and Yuwei Hu and Luis Ceze and Carlos Guestrin and Arvind Krishnamurthy},
title = {{TVM}: An Automated End-to-End Optimizing Compiler for Deep Learning},
booktitle = {13th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 18)},
year = {2018},
isbn = {978-1-939133-08-3},
address = {Carlsbad, CA},
pages = {578--594},
url = {https://www.usenix.org/conference/osdi18/presentation/chen},
publisher = {{USENIX} Association},
month = oct,
}

@article{Cheli2021,
  doi = {10.21105/joss.03078},
  url = {https://doi.org/10.21105/joss.03078},
  year = {2021},
  publisher = {The Open Journal},
  volume = {6},
  number = {59},
  pages = {3078},
  author = {Alessandro Cheli},
  title = {Metatheory.jl: Fast and Elegant Algebraic Computation in Julia with Extensible Equality Saturation},
  journal = {Journal of Open Source Software}
}

@InProceedings{hashing-alpha,
author = {Maziarz, Krzysztof and Ellis, Tom and Lawrence, Alan and Fitzgibbon, Andrew and Peyton Jones, Simon},
title = {Hashing Modulo Alpha-Equivalence},
organization = {ACM},
booktitle = {ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'21)},
year = {2021},
month = {June},
abstract = {In many applications one wants to identify identical subtrees of a program syntax tree.  This identification should ideally be robust to alpha-renaming of the program, but no existing technique has been shown to achieve this with good efficiency (better than O(n^2) in expression size). We present a new, asymptotically efficient way to hash modulo alpha-equivalence. A key insight of our method is to use a weak (commutative) hash combiner at exactly one point in the construction, which admits an algorithm with O(n*(log n)^2) time complexity. We prove that the use of the commutative combiner nevertheless yields a strong hash with low collision probability.},
publisher = {ACM},
url = {https://www.microsoft.com/en-us/research/publication/hashing-modulo-alpha-equivalence-2/},
}

@article{gj,
author = {Ngo, Hung Q and R\'{e}, Christopher and Rudra, Atri},
title = {Skew Strikes Back: New Developments in the Theory of Join Algorithms},
year = {2014},
issue_date = {December 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {42},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/2590989.2590991},
doi = {10.1145/2590989.2590991},
journal = {SIGMOD Rec.},
month = feb,
pages = {5–16},
numpages = {12}
}